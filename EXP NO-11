#include <stdio.h>
#include <stdbool.h>

#define MAX_STATES 10
#define MAX_TRANSITIONS 10

// Structure to represent a transition in the NFA
struct Transition {
    int fromState;
    char symbol;
    int toState;
};

// Function to find ε-closure for a given state
void epsilonClosure(int nfa[MAX_STATES][MAX_TRANSITIONS], int numStates, int state, bool visited[]) {
    printf("ε-Closure(%d): { %d ", state, state);

    // Mark the current state as visited
    visited[state] = true;

    // Iterate through transitions for the current state
    for (int i = 0; i < numStates; i++) {
        // Check if there is an ε-move
        if (nfa[state][i] == -1) {
            // Check if the destination state is not visited
            if (!visited[i]) {
                epsilonClosure(nfa, numStates, i, visited);
            }
        }
    }

    printf("}\n");
}

int main() {
    int numStates, numSymbols, numTransitions;

    // Get the number of states, symbols, and transitions from the user
    printf("Enter the number of states: ");
    scanf("%d", &numStates);

    printf("Enter the number of symbols (excluding ε): ");
    scanf("%d", &numSymbols);

    printf("Enter the number of transitions: ");
    scanf("%d", &numTransitions);

    // Initialize the NFA matrix with -1 (no transition)
    int nfa[MAX_STATES][MAX_TRANSITIONS];
    for (int i = 0; i < MAX_STATES; i++) {
        for (int j = 0; j < MAX_TRANSITIONS; j++) {
            nfa[i][j] = -1;
        }
    }

    // Input the transitions for the NFA
    printf("Enter the transitions (use -1 for no transition):\n");
    for (int i = 0; i < numTransitions; i++) {
        int fromState, toState;
        char symbol;

        printf("Transition %d: ", i + 1);
        scanf("%d %c %d", &fromState, &symbol, &toState);

        // Store the transition in the NFA matrix
        nfa[fromState][symbol - 'a'] = toState;
    }

    // Find ε-closure for all states
    printf("\nε-Closure for all states:\n");
    for (int i = 0; i < numStates; i++) {
        bool visited[MAX_STATES] = {false};
        epsilonClosure(nfa, numStates, i, visited);
    }

    return 0;
}
